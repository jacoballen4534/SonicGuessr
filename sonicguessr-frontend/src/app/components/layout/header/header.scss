// src/app/components/layout/header/header.scss
@use '../../../typography/theme-variables.scss' as *; // Adjust path to your theme variables
@use 'sass:color';

.app-header {
  background-color: $white;
  box-shadow: $box-shadow-soft;
  padding: 10px $spacing-lg; // e.g., 10px 24px
  display: flex;
  justify-content: space-between;
  align-items: center;
  min-height: 60px; // Or your preferred header height
  position: sticky; // Make header sticky if desired
  top: 0;
  z-index: 1000; // Ensure it's above other content if sticky
}

.logo-container {
  .logo-link {
    text-decoration: none;
    display: flex;
    align-items: center;
  }
  .logo-image {
    height: 40px; // Adjust as needed
    margin-right: $spacing-sm;
  }
  .logo-text {
    font-family: $font-family-headings;
    font-size: 1.8rem; // Adjust as needed
    font-weight: 700;
    color: $accent-primary;
    // Example: text-shadow: 1px 1px 2px rgba(darken($accent-primary, 20%), 0.2);
  }
}

.main-nav {
  ul {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: $spacing-sm; // Space between nav items
  }

  li {
    a {
      font-family: $font-family-headings;
      font-weight: 600;
      color: $text-color;
      padding: 10px 15px;
      border-radius: $border-radius-md;
      text-decoration: none;
      transition: background-color 0.2s ease, color 0.2s ease;

      &:hover {
        background-color: color.adjust($accent-secondary, $alpha: -0.8); // Lighter yellow
        color: $text-color;
      }

      &.active-nav-link {
        background-color: $accent-primary;
        color: $white;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
      }
    }
  }
}

.user-actions {
  display: flex;
  align-items: center;
  gap: $spacing-md;

  .user-profile-display {
    display: flex;
    align-items: center;
    gap: $spacing-sm;

    .profile-link {
        display: flex;
        align-items: center;
        text-decoration: none;
        padding: 5px;
        border-radius: $border-radius-md;
        transition: background-color 0.2s ease;
        &:hover {
            background-color: $secondary-bg;
        }
    }

    .user-avatar, .user-avatar-placeholder {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      border: 2px solid $accent-secondary;
      object-fit: cover;
      font-family: $font-family-headings;
      font-weight: bold;
      color: $accent-primary;
      background-color: $white;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.1rem;
    }

    .user-name {
      font-weight: 600;
      color: $text-color;
      margin-left: $spacing-xs; // Small space after avatar if inside link
      margin-right: $spacing-md; // Space before logout button
    }
  }

  .login-button { // Uses .button-cta styles
    // If you have global .button-cta, just apply the class in HTML
    // Otherwise, define similar styles here using theme variables
    padding: 8px 18px;
    background-color: $accent-primary;
    color: $white;
    border: none;
    border-radius: $border-radius-md;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
     &:hover {
        background-color: color.adjust($accent-primary, $lightness: -8%);
     }
  }

  .logout-button { // Uses .button-secondary styles (example)
    padding: 8px 15px;
    background-color: $secondary-bg;
    color: $text-color;
    border: 1px solid color.adjust($secondary-bg, $lightness: 10%);
    border-radius: $border-radius-md;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease, border-color 0.2s ease;
    &:hover {
        background-color: color.adjust($secondary-bg, $lightness: 5%);
        border-color: color.adjust($secondary-bg, $lightness: 20%);
    }
  }
}


// Placeholder variables - REPLACE THESE with your sprite's actual dimensions
$sonic-frame-width: 25px;   // <<<< Replace with width of ONE frame
$sonic-frame-height: 32px;  // <<<< Replace with height of ONE frame
$sonic-spin-frames: 4;      // <<<< Replace with an EVEN number of frames in your spin sequence for smoother loop
$sonic-sprite-sheet-width: $sonic-frame-width * $sonic-spin-frames; // Total width of the sprite sheet image

.sonic-animation-container {
  position: absolute; // Position relative to the .app-header
  bottom: 0;          // Run along the bottom of the header
  left: 0;
  width: 100%;
  height: $sonic-frame-height + 5px; // Height for Sonic + a little breathing room
  overflow: hidden; // Keep Sonic contained within this strip if header has padding
  pointer-events: none; // So Sonic doesn't block clicks on header elements
}

.sonic-sprite {
  width: $sonic-frame-width;
  height: $sonic-frame-height;
  background-image: url('../../../../assets/images/sonic-spin-sprite.png'); // <<<< Ensure this path is correct
  background-repeat: no-repeat;
  position: absolute;
  bottom: 2px; // Small offset from the bottom of the container

  // Two animations: one for spinning frames, one for movement and turning
  animation: 
    sonic-spin-frames 1s steps($sonic-spin-frames) infinite, // 0.6s for one full spin cycle of X frames
    sonic-move-and-turn 20s linear infinite; // 10 seconds for a full round trip (L-R, R-L)
}

// Keyframes for cycling through the sprite sheet frames
@keyframes sonic-spin-frames {
  from { background-position: 0 0; }
  to { background-position: -$sonic-sprite-sheet-width 0; } 
  // Moves background from start to end of the sprite sheet row
}

// Keyframes for movement across screen, flipping, and returning
@keyframes sonic-move-and-turn {
  0% { // Start off-screen left, facing right
    left: -$sonic-frame-width * 2; // Start further off-screen
    transform: scaleX(1);
  }
  45% { // Move to the far right edge, still facing right
    left: calc(100% + #{$sonic-frame-width}); // Move fully off-screen to the right
    transform: scaleX(1);
  }
  // Pause briefly off-screen right and flip
  49.9% { 
    left: calc(100% + #{$sonic-frame-width}); // Stay off-screen right
    transform: scaleX(1); // Still facing right before flip
  }
  50% { // Flipped, ready to return
    left: calc(100% + #{$sonic-frame-width}); // Still off-screen right
    transform: scaleX(-1); // Flip to face left
  }
  // Move back to far left edge, facing left
  95% {
    left: -$sonic-frame-width * 2; // Move fully off-screen to the left
    transform: scaleX(-1);
  }
  // Pause briefly off-screen left and flip for next cycle
  99.9% {
    left: -$sonic-frame-width * 2; // Stay off-screen left
    transform: scaleX(-1); // Still facing left before flip
  }
  100% { // Flipped, ready for next cycle L-R
    left: -$sonic-frame-width * 2; // Reset to start
    transform: scaleX(1);
  }
}
